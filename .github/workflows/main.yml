name: "Build & Unit Test"

on:
  pull_request:
    branches:
      - develop
  push:
    branches:
      - develop

jobs:
  android:
    name: Build & Release for Android
    runs-on: ubuntu-latest

    steps:
      # Étape 1 : Checkout du dépôt
      - name: Checkout Repository
        uses: actions/checkout@v3

      # Étape 2 : Configuration de Java
      - name: Set Up Java
        uses: actions/setup-java@v3.12.0
        with:
          distribution: 'oracle'
          java-version: '17'

      # Étape 3 : Configuration de Flutter
      - name: Set Up Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: '3.24.4'
          channel: 'stable'

      # Étape 4 : Installation des dépendances Flutter
      - name: Install Dependencies
        run: flutter pub get

      # Étape 5 : Génération des fichiers Android
      - name: Build APK
        run: flutter build apk --debug

      - name: Build appBundle
        run: flutter build appbundle

      # Étape 6 : Téléversement des artefacts Android
      - name: Upload Android Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: Android Releases
          path: |
            build/app/outputs/flutter-apk/app-debug.apk
            build/app/outputs/bundle/release/app-release.aab

      # Étape 7 : Envoi de l'APK sur TestApp.io
      - name: Upload APK to TestApp.io
        uses: testappio/github-action@v5
        with:
          api_token: ${{ secrets.TESTAPPIO_API_TOKEN }}
          app_id: ${{ secrets.TESTAPPIO_APP_ID }}
          file: build/app/outputs/flutter-apk/app-debug.apk
          release_notes: "Build from GitHub Actions"
          git_release_notes: true
          include_git_commit_id: false
          notify: true

  ios:
    name: Build & Release for iOS
    runs-on: macos-latest

    steps:
      # Étape 1 : Checkout du dépôt
      - name: Checkout Repository
        uses: actions/checkout@v3

        # Étape 3 : Configuration de Flutter
      - name: Set Up Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: '3.24.4'
          channel: 'stable'

      # Étape 4 : Installation des dépendances Flutter
      - name: Install Dependencies
        run: flutter pub get

      # Étape 2 : Installation de CocoaPods
      - name: Install CocoaPods
        run: |
          cd ios
          pod install

      # Étape 3 : Construction du fichier `.ipa` sans signature
      - name: Build iOS IPA
        env:
          FLUTTER_ROOT: ${{ env.HOME }}/flutter
          CI: true
        run: |
          flutter build ios --release --no-codesign
          mkdir -p build/ios/ipa
          xcodebuild \
            -workspace ios/Runner.xcworkspace \
            -scheme Runner \
            -sdk iphoneos \
            -configuration Release \
            -archivePath build/ios/archive/Runner.xcarchive \
            archive \
            -allowProvisioningUpdates
          xcodebuild \
            -exportArchive \
            -archivePath build/ios/archive/Runner.xcarchive \
            -exportPath build/ios/ipa \
            -exportOptionsPlist ios/ExportOptions.plist \
            -allowProvisioningUpdates

      # Étape 4 : Téléversement des artefacts iOS
      - name: Upload iOS Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: iOS Releases
          path: build/ios/ipa/*.ipa

      # Étape 5 : Envoi de l'IPA sur TestApp.io
      - name: Upload IPA to TestApp.io
        uses: testappio/github-action@v5
        with:
          api_token: ${{ secrets.TESTAPPIO_API_TOKEN }}
          app_id: ${{ secrets.TESTAPPIO_APP_ID }}
          file: build/ios/ipa/Runner.ipa
          release_notes: "Build from GitHub Actions"
          git_release_notes: true
          include_git_commit_id: false
          notify: true
